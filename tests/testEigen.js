import * as math from "mathjs";
import { PCA } from "ml-pca";

const input = "-8.147236864 -5.362254675 -2.359449986 1.131843072 1.131843072 -8.370377416 -7.826239423 0.983783761 0.924213245 -2.482959315 -1.322512554 -6.466517136 -10.80662398 -9.582323137 -9.087739122 -14.08773912 -7.724679688 -7.724679688 -12.20744604 -13.83025194 -15 -13.2119404 -15 -15 -9.914913446 -1.929455518 -2.220222033 -0.331244899 -10.16995098 -7.203192249 -9.057919371 -3.589104179 -7.170240792 -2.830308315 -2.830308315 -3.17476912 -4.637899221 0.378460259 -1.612306967 0.844871243 0.577759732 -4.496822154 -0.795884238 4.774778472 8.936564692 3.936564692 8.660506361 8.660506361 5.859082131 9.859620595 -7.500913552 2.345052071 -2.654947929 1.533794382 6.641510024 2.861478784 0.166360386 -4.067436035 -10.89303911 -7.705256093 -1.269868163 8.305200191 7.522813018 9.310164566 9.310164566 4.92272097 2.829072661 3.231633076 -0.677399449 -3.82024771 -5.303652639 -2.912569579 -3.600806188 -5.287831598 -2.577601285 -7.577601285 -0.488380893 -0.488380893 2.02963118 0.722098991 -0.436889193 9.13287279 4.13287279 -0.16098692 8.015290164 5.496433934 8.939521861 9.637447947 6.535369428 10.77703702 -9.133758561 0.515126791 4.672482042 7.249883348 7.249883348 3.434298777 0.887431958 7.483574691 2.890660439 5.455410752 8.763697031 7.407264216 7.713357805 14.75299663 10.61962302 5.619623018 12.89825184 12.89825184 4.387884754 0.499912307 -0.377396888 7.932702817 2.932702817 0.175576031 8.1238902 12.12076334 9.068406237 12.22024304 2.464477992 7.543060838 -6.323592462 -4.747461645 -1.82538835 0.605936331 0.605936331 -7.04923155 -4.80948232 -0.66215983 -1.13431513 -5.426951361 -4.57431045 3.908603759 8.789583064 9.049008755 12.52522856 7.525228565 0.139384412 0.139384412 17.22086771 20.02338839 11.52756029 15.03640554 10.03640554 10.16848922 16.61167052 19.1621688 16.42138661 12.37257693 9.429438713 10.28459668 -0.97540405 8.730523768 13.32544803 12.24771823 12.24771823 4.295719216 2.498692447 10.26057305 13.87432862 15.37449096 15.87172705 24.79272467 25 25 21.74183023 16.74183023 15.14773848 15.14773848 25 23.89738837 5.092979229 7.775755372 2.775755372 3.417169486 7.203263313 10.46236922 7.169449694 2.37196591 1.596281519 4.221103866";
const floats = input.trim().split(" ").map(parseFloat); // convert the string to an array of floats

// console.log(floats.length)
let gMatrix = []

for (let i = 0; i < 30; i++) {
  let row = []
  for (let j = 0; j < 6; j++) {
    row.push(floats[i + j * 30])
  }
  gMatrix.push(row);
}

// get row 5-30
const gMatrix25 = gMatrix.slice(5);
console.log("gMatrix25", gMatrix25);
console.log("length", gMatrix25.length)

// convert to math.js matrix
const gMatrix25Matrix = math.matrix(gMatrix25);
// console.log("gMatrix25Matrix", gMatrix25Matrix);

// take the average of the gMatrix row 5 - 30 axis 1
const gAvg = math.mean(gMatrix25Matrix, 0);
// console.log("gAvg", gAvg);

// convert math.js matrix to javascript array
const g25Arr = gMatrix25Matrix.toArray();
// console.log("g25Arr", g25Arr);

// use ml-pca to find the eigenvector
const pca = new PCA(g25Arr);

// get the eigenvector
const eigenvector = pca.getEigenvectors();
console.log("eigenvector", eigenvector);

// get the index of the column with the highest eigenvalue
const maxEigenIndex = pca
  .getEigenvalues()
  .indexOf(Math.max(...pca.getEigenvalues()));
console.log("maxEigenIndex", maxEigenIndex);

// get the eigenvector with the highest eigenvalue
const maxEigenVector = eigenvector.getRow(maxEigenIndex);
console.log("maxEigenVector", maxEigenVector);
